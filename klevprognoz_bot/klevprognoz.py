from datetime import datetime, timedelta
import logging
import requests
import ephem
import random
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters
)

# === –¢–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã ===
TELEGRAM_TOKEN = '7297237331:AAEBR05LkndfAl-uJoiUmimctS6AZ7UxSwM'
OPENWEATHER_API_KEY = '355f0d0d5a864bdc9cb964863445f16c'

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
CHOOSING_WATERBODY, CHOOSING_FISH, CHOOSING_DATE = range(3)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
WATERBODIES = {
    "–û–∑–µ—Ä–æ –ù–∞—Ä–æ—á—å": "Naroch",
    "–û–∑–µ—Ä–æ –ú—è—Å—Ç—Ä–æ": "Naroch",
    "–û–∑–µ—Ä–æ –°–≤–∏—Ä—å": "Svir",
    "–í–∏–ª–µ–π—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": "Vileyka",
    "–ó–∞—Å–ª–∞–≤—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": "Zaslawye",
    "–ö—Ä—É–ø—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": "Krupki",
    "–ù–µ—Å–≤–∏–∂—Å–∫–∏–µ –ø—Ä—É–¥—ã": "Nyasvizh",
    "–õ–æ—à–∞–Ω—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": "Uzda",
    "–†–µ–∫–∞ –ë–µ—Ä–µ–∑–∏–Ω–∞": "Berezino",
    "–†–µ–∫–∞ –°–≤–∏—Å–ª–æ—á—å": "Minsk",
    "–†–µ–∫–∞ –ü—Ç–∏—á—å": "Pukhavichy",
    "–†–µ–∫–∞ –°–ª—É—á—å": "Slutsk",
    "–†–µ–∫–∞ –°–æ–∂": "Gomel"
}

FISH_PROFILES = [
    {
        "name": "–ö–∞—Ä–ø",
        "active_temp_range": (18, 26),
        "pressure_preference": "—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –≤—ã—Å–æ–∫–æ–µ (>755 –º–º —Ä—Ç.—Å—Ç.)",
        "best_weather": "–¢—ë–ø–ª–∞—è –±–µ–∑–≤–µ—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–≥–æ–¥–∞",
        "best_baits": ["–∫—É–∫—É—Ä—É–∑–∞", "–±–æ–π–ª—ã", "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å"],
        "best_time_of_day": "—É—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä",
        "fishing_methods": ["–¥–æ–Ω–∫–∞", "—Ñ–∏–¥–µ—Ä", "–ø–æ–ø–ª–∞–≤–æ—á–Ω–∞—è —É–¥–æ—á–∫–∞"]
    },
    {
        "name": "–©—É–∫–∞",
        "active_temp_range": (8, 18),
        "pressure_preference": "–ø–∞–¥–∞—é—â–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ",
        "best_weather": "–ü–∞—Å–º—É—Ä–Ω–∞—è –ø–æ–≥–æ–¥–∞, –ª—ë–≥–∫–∏–π –≤–µ—Ç–µ—Ä",
        "best_baits": ["–∂–∏–≤–µ—Ü", "–≤–æ–±–ª–µ—Ä", "–¥–∂–∏–≥-–ø—Ä–∏–º–∞–Ω–∫–∏"],
        "best_time_of_day": "—É—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä",
        "fishing_methods": ["—Å–ø–∏–Ω–Ω–∏–Ω–≥", "–∂–∏–≤—Ü–æ–≤–∞—è —Å–Ω–∞—Å—Ç—å"]
    }
]

FISHING_TIPS = [
    "üåø –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞—Å–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –ª–æ–≤–ª–µ –≤ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –≤–æ–¥–µ.",
    "üí® –ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º –≤–µ—Ç—Ä–µ –ª–æ–≤–∏—Ç–µ –Ω–∞ –ø–æ–¥–≤–µ—Ç—Ä–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –≤–æ–¥–æ–µ–º–∞.",
    "üéØ –õ—É—á—à–∏–µ —É–ª–æ–≤—ã ‚Äî –Ω–∞ –∑–∞—Ä–µ –∏ –∑–∞–∫–∞—Ç–µ.",
    "‚òÄÔ∏è –í –∂–∞—Ä—É –ª–æ–≤–∏—Ç–µ —É—Ç—Ä–æ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º, –≤ —Ç–µ–Ω–∏ –¥–µ—Ä–µ–≤—å–µ–≤.",
    "üß§ –í —Ö–æ–ª–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–∞–Ω–∫–∏.",
    "üåß –ü–æ—Å–ª–µ –¥–æ–∂–¥—è —Ä—ã–±–∞ –æ—Å–æ–±–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ —á–µ—Ä–≤—è.",
    "üî• –í–µ—Å–Ω–æ–π —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∂–∏–≤–µ—Ü –∏ –º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞.",
    "üåë –ü—Ä–∏ –Ω–æ–≤–æ–ª—É–Ω–∏–∏ –∫–ª–µ–≤ –æ–±—ã—á–Ω–æ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –¥–Ω—ë–º."
]

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def fetch_weather(city_name, date_offset=0):
    try:
        if date_offset == 0:
            url = f"https://api.openweathermap.org/data/2.5/weather?q={city_name},BY&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        else:
            url = f"https://api.openweathermap.org/data/2.5/forecast?q={city_name},BY&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"

        response = requests.get(url)
        data = response.json()

        if response.status_code != 200:
            return None

        if date_offset == 0:
            return {
                "temp": data["main"]["temp"],
                "wind": data["wind"]["speed"],
                "pressure": data["main"]["pressure"],
                "description": data["weather"][0]["description"]
            }
        else:
            forecast_list = data.get("list", [])
            target_time = datetime.now() + timedelta(days=date_offset)
            target_day = target_time.date()

            for forecast in forecast_list:
                forecast_time = datetime.fromtimestamp(forecast['dt'])
                if forecast_time.date() == target_day and 9 <= forecast_time.hour <= 12:
                    return {
                        "temp": forecast["main"]["temp"],
                        "wind": forecast["wind"]["speed"],
                        "pressure": forecast["main"]["pressure"],
                        "description": forecast["weather"][0]["description"]
                    }
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return None

def get_moon_phase(target_date=None):
    moon = ephem.Moon()
    moon.compute(ephem.Date(target_date)) if target_date else moon.compute()
    phase = moon.phase
    if phase < 5:
        return "–Ω–æ–≤–æ–ª—É–Ω–∏–µ"
    elif 5 <= phase < 45:
        return "–ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif 45 <= phase < 55:
        return "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    else:
        return "–ø–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"


def calculate_fishing_success(fish_profile, weather_data, time_of_day, moon_phase):
    score = 50
    temp = weather_data.get("temp")
    min_temp, max_temp = fish_profile["active_temp_range"]
    if min_temp <= temp <= max_temp:
        score += 20
    elif abs(temp - min_temp) <= 5 or abs(temp - max_temp) <= 5:
        score += 10
    else:
        score -= 10

    wind = weather_data.get("wind")
    if wind > 8:
        score -= 10
    elif 4 <= wind <= 8:
        score += 5
    else:
        score += 10

    pressure = weather_data.get("pressure")
    if "–≤—ã—Å–æ–∫–æ–µ" in fish_profile["pressure_preference"] and pressure > 755:
        score += 10
    elif "–ø–∞–¥–∞—é—â–µ–µ" in fish_profile["pressure_preference"] and pressure < 750:
        score += 10
    else:
        score += 5

    if "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ" in moon_phase.lower():
        score -= 5
    elif "–Ω–æ–≤–æ–ª—É–Ω–∏–µ" in moon_phase.lower():
        score += 5

    return min(max(score, 0), 100)

def save_user_id(user_id):
    try:
        with open('users.txt', 'r') as f:
            users = f.read().splitlines()
    except FileNotFoundError:
        users = []

    if str(user_id) not in users:
        with open('users.txt', 'a') as f:
            f.write(f"{user_id}\n")

def find_fish_profile(name):
    for fish in FISH_PROFILES:
        if fish["name"] == name:
            return fish
    return None

def parse_date(date_text):
    try:
        return datetime.strptime(date_text, "%d.%m.%Y")
    except ValueError:
        return None

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    save_user_id(user_id)

    context.user_data.clear()
    welcome_text = (
        "üé£ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Klevprofish_bot!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞—á–Ω—É—é —Ä—ã–±–∞–ª–∫—É, "
        "—É—á–∏—Ç—ã–≤–∞—è —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É, —Ñ–∞–∑—É –õ—É–Ω—ã, –¥–∞–≤–ª–µ–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä—ã–±—ã. üêü\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    keyboard = [
        [KeyboardButton("üîµ –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")],
        [KeyboardButton("üõü –ü–æ–º–æ—â—å"), KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return CHOOSING_WATERBODY

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)

async def choose_waterbody(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üîµ –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑":
        keyboard = [[name] for name in WATERBODIES.keys()]
        keyboard.append(["üîÅ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–æ—ë–º:", reply_markup=reply_markup)
        return CHOOSING_WATERBODY

    elif text == "üõü –ü–æ–º–æ—â—å":
        await update.message.reply_text("üõ† –ü–æ–º–æ—â—å:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–æ—ë–º ‚ûî –í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–±—É ‚ûî –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É ‚ûî –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑! üé£")
        return CHOOSING_WATERBODY

    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await update.message.reply_text("‚ÑπÔ∏è Klevprofish_bot v1.2\n–ê–≤—Ç–æ—Ä: @—Ç–≤–æ–π–Ω–∏–∫–Ω–µ–π–º\n–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª—ë–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥—ã –∏ –õ—É–Ω—ã!")
        return CHOOSING_WATERBODY

    elif text == "üîÅ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        return await start(update, context)

    elif text not in WATERBODIES:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–æ—ë–º –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CHOOSING_WATERBODY

    context.user_data['waterbody'] = text

    fish_list = ["–ö–∞—Ä–ø", "–©—É–∫–∞"]
    keyboard = [[fish] for fish in fish_list]
    keyboard.append(["üîÅ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text("üêü –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–±—É:", reply_markup=reply_markup)
    return CHOOSING_FISH

async def choose_fish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîÅ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        return await start(update, context)

    context.user_data['fish'] = text
    keyboard = [["–°–µ–≥–æ–¥–Ω—è"], ["–ó–∞–≤—Ç—Ä–∞"], ["–°–≤–æ—è –¥–∞—Ç–∞"], ["üîÅ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìÖ –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑?", reply_markup=reply_markup)
    return CHOOSING_DATE

async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_choice = update.message.text.strip()

    if user_choice == "üîÅ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        return await start(update, context)

    if user_choice == "–°–µ–≥–æ–¥–Ω—è":
        context.user_data['target_date'] = datetime.now()
        return await show_forecast(update, context)

    elif user_choice == "–ó–∞–≤—Ç—Ä–∞":
        context.user_data['target_date'] = datetime.now() + timedelta(days=1)
        return await show_forecast(update, context)

    elif user_choice == "–°–≤–æ—è –¥–∞—Ç–∞":
        context.user_data['awaiting_manual_date'] = True
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return CHOOSING_DATE

    elif context.user_data.get('awaiting_manual_date'):
        target_date = parse_date(user_choice)
        if not target_date:
            await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
            return CHOOSING_DATE

        today = datetime.now().date()
        if not (today <= target_date.date() <= today + timedelta(days=5)):
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ 5 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥.")
            return CHOOSING_DATE

        context.user_data['target_date'] = target_date
        context.user_data['awaiting_manual_date'] = False
        return await show_forecast(update, context)

async def show_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    waterbody = context.user_data['waterbody']
    fish_name = context.user_data['fish']
    target_date = context.user_data['target_date']
    city = WATERBODIES[waterbody]
    offset = (target_date.date() - datetime.now().date()).days

    weather = fetch_weather(city, offset)
    if not weather:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É.")
        return ConversationHandler.END

    fish_profile = find_fish_profile(fish_name)
    moon_phase = get_moon_phase(target_date)
    time_of_day = get_time_of_day(target_date)
    success = calculate_fishing_success(fish_profile, weather, time_of_day, moon_phase)

    forecast = f"""
üìç –í–æ–¥–æ—ë–º: {waterbody}
üêü –†—ã–±–∞: {fish_name}
üìÖ –î–∞—Ç–∞: {target_date.strftime("%d.%m.%Y")}
üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C
üí® –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å
üìà –î–∞–≤–ª–µ–Ω–∏–µ: {weather['pressure']} –º–º —Ä—Ç. —Å—Ç.
üåë –§–∞–∑–∞ –õ—É–Ω—ã: {moon_phase}

üî• –ò–Ω–¥–µ–∫—Å –∫–ª—ë–≤–∞: {success}%

üé£ –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {', '.join(fish_profile['best_baits'])}.
–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {fish_profile['best_time_of_day']}.
–ú–µ—Ç–æ–¥—ã: {', '.join(fish_profile['fishing_methods'])}.
"""
    await update.message.reply_text(forecast, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open('users.txt', 'r') as f:
            users = f.read().splitlines()
        count = len(users)
    except FileNotFoundError:
        count = 0

    await update.message.reply_text(f"üìà –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count} üé£")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_WATERBODY: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_waterbody)],
            CHOOSING_FISH: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_fish)],
            CHOOSING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_date)],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("menu", menu)],
    )

    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(conv_handler)

    print("üöÄ Klevprofish_bot v1.2 –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()