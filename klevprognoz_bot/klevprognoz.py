import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
CHOOSING_REGION = 0

# === –î–∞–Ω–Ω—ã–µ ===
REGIONS = {"–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "Minsk"}

# === –ö–æ–º–∞–Ω–¥—ã ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logging.info(f"–ü–æ–ª—É—á–µ–Ω /start –æ—Ç user_id={update.effective_user.id}")
    keyboard = [[region] for region in REGIONS]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üèû –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:", reply_markup=markup)
    return CHOOSING_REGION

async def choose_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    region = update.message.text
    if region not in REGIONS:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return CHOOSING_REGION
    await update.message.reply_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {region}", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# === –ó–∞–ø—É—Å–∫ ===

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_region)]
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...")
    application.run_polling()

if __name__ == "__main__":
    main()
