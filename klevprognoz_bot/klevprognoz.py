import os
import logging
import requests
import ephem
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# === –¢–æ–∫–µ–Ω—ã ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
CHOOSING_REGION, CHOOSING_DISTRICT, CHOOSING_WATERBODY, CHOOSING_DATE = range(4)

# === –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ (—á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞–ª–∞—Å—å –ª–æ–≥–∏–∫–∞) ===
def save_user_id(user_id):
    pass

# === –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
REGIONS = {
    "–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "Minsk"
}

DISTRICTS_BY_REGION = {
    "–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": [
        "–ë–µ—Ä–µ–∑–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–ë–æ—Ä–∏—Å–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–í–∏–ª–µ–π—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–í–æ–ª–æ–∂–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω",
        "–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–ö–ª–µ—Ü–∫–∏–π —Ä–∞–π–æ–Ω", "–ö–æ–ø—ã–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–ö—Ä—É–ø—Å–∫–∏–π —Ä–∞–π–æ–Ω",
        "–õ–æ–≥–æ–π—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–õ—é–±–∞–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–ú–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–ú–æ–ª–æ–¥–µ—á–Ω–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω",
        "–ú—è–¥–µ–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–ù–µ—Å–≤–∏–∂—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–ü—É—Ö–æ–≤–∏—á—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–°–ª—É—Ü–∫–∏–π —Ä–∞–π–æ–Ω",
        "–°–º–æ–ª–µ–≤–∏—á—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–°–æ–ª–∏–≥–æ—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–°—Ç–∞—Ä–æ–¥–æ—Ä–æ–∂—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–°—Ç–æ–ª–±—Ü–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω",
        "–£–∑–¥–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–ß–µ—Ä–≤–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω"
    ]
}

WATERBODIES_BY_DISTRICT = {
    "–ë–µ—Ä–µ–∑–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–†–µ–∫–∞ –ë–µ—Ä–µ–∑–∏–Ω–∞"],
    "–ë–æ—Ä–∏—Å–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω": [],
    "–í–∏–ª–µ–π—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–í–∏–ª–µ–π—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ", "–û–∑–µ—Ä–æ –°–µ–ª—è–≤–∞"],
    "–í–æ–ª–æ–∂–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω": [],
    "–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω": [],
    "–ö–ª–µ—Ü–∫–∏–π —Ä–∞–π–æ–Ω": [],
    "–ö–æ–ø—ã–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω": [],
    "–ö—Ä—É–ø—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–ö—Ä—É–ø—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ"],
    "–õ–æ–≥–æ–π—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–†–µ–∫–∞ –£—Å–∞"],
    "–õ—é–±–∞–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–û–∑–µ—Ä–æ –ö—Ä–æ–º–∞–Ω—å"],
    "–ú–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–ó–∞—Å–ª–∞–≤—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ", "–î—Ä–æ–∑–¥—ã", "–û–∑–µ—Ä–æ –ú–µ–¥–≤–µ–∂–∏–Ω–æ", "–†–µ–∫–∞ –°–≤–∏—Å–ª–æ—á—å"],
    "–ú–æ–ª–æ–¥–µ—á–Ω–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω": [],
    "–ú—è–¥–µ–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω": [],
    "–ù–µ—Å–≤–∏–∂—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–ù–µ—Å–≤–∏–∂—Å–∫–∏–µ –ø—Ä—É–¥—ã"],
    "–ü—É—Ö–æ–≤–∏—á—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–†–µ–∫–∞ –ü—Ç–∏—á—å"],
    "–°–ª—É—Ü–∫–∏–π —Ä–∞–π–æ–Ω": ["–†–µ–∫–∞ –°–ª—É—á—å"],
    "–°–º–æ–ª–µ–≤–∏—á—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–û–∑–µ—Ä–æ –ë–µ–ª–æ–µ"],
    "–°–æ–ª–∏–≥–æ—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–û–∑–µ—Ä–æ –†—É–¥–µ—è"],
    "–°—Ç–∞—Ä–æ–¥–æ—Ä–æ–∂—Å–∫–∏–π —Ä–∞–π–æ–Ω": [],
    "–°—Ç–æ–ª–±—Ü–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–†–µ–∫–∞ –õ–æ—à–∞"],
    "–£–∑–¥–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω": [],
    "–ß–µ—Ä–≤–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–ß–∏–≥–∏—Ä–∏–Ω—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ"]
}

WATERBODY_TO_CITY = {
    "–ó–∞—Å–ª–∞–≤—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": "Zaslawye",
    "–í–∏–ª–µ–π—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": "Vileyka",
    "–ù–µ—Å–≤–∏–∂—Å–∫–∏–µ –ø—Ä—É–¥—ã": "Nyasvizh",
    "–ö—Ä—É–ø—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": "Krupki",
    "–ß–∏–≥–∏—Ä–∏–Ω—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": "Chervyen",
    "–î—Ä–æ–∑–¥—ã": "Minsk",
    "–û–∑–µ—Ä–æ –ú–µ–¥–≤–µ–∂–∏–Ω–æ": "Minsk",
    "–†–µ–∫–∞ –°–≤–∏—Å–ª–æ—á—å": "Minsk",
    "–†–µ–∫–∞ –ü—Ç–∏—á—å": "Pukhavichy",
    "–û–∑–µ—Ä–æ –î–∏–∫–æ–µ": "Pleshchenitsy",
    "–†–µ–∫–∞ –£—Å–∞": "Lahoisk",
    "–û–∑–µ—Ä–æ –ë–µ–ª–æ–µ": "Smolevichi",
    "–†–µ–∫–∞ –ë–µ—Ä–µ–∑–∏–Ω–∞": "Berezino",
    "–û–∑–µ—Ä–æ –°–µ–ª—è–≤–∞": "Krugloe",
    "–†–µ–∫–∞ –°–ª—É—á—å": "Slutsk",
    "–†–µ–∫–∞ –õ–æ—à–∞": "Stolbtsy",
    "–û–∑–µ—Ä–æ –ö—Ä–æ–º–∞–Ω—å": "Lyuban",
    "–û–∑–µ—Ä–æ –†—É–¥–µ—è": "Luban"
}

FISH_BY_WATERBODY = {
    "–ó–∞—Å–ª–∞–≤—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": ["–©—É–∫–∞", "–û–∫—É–Ω—å", "–ü–ª–æ—Ç–≤–∞"],
    "–í–∏–ª–µ–π—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": ["–°—É–¥–∞–∫", "–©—É–∫–∞", "–û–∫—É–Ω—å", "–°–æ–º"],
    "–ù–µ—Å–≤–∏–∂—Å–∫–∏–µ –ø—Ä—É–¥—ã": ["–ö–∞—Ä–ø", "–ö–∞—Ä–∞—Å—å", "–õ–µ—â"],
    "–ö—Ä—É–ø—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": ["–ö–∞—Ä–∞—Å—å", "–õ–µ—â", "–ü–ª–æ—Ç–≤–∞"],
    "–ß–∏–≥–∏—Ä–∏–Ω—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": ["–°—É–¥–∞–∫", "–©—É–∫–∞", "–°–æ–º"],
    "–î—Ä–æ–∑–¥—ã": ["–ö–∞—Ä–∞—Å—å", "–ö–∞—Ä–ø", "–ü–ª–æ—Ç–≤–∞"],
    "–û–∑–µ—Ä–æ –ú–µ–¥–≤–µ–∂–∏–Ω–æ": ["–ö–∞—Ä–∞—Å—å", "–û–∫—É–Ω—å"],
    "–†–µ–∫–∞ –°–≤–∏—Å–ª–æ—á—å": ["–ö–∞—Ä–∞—Å—å", "–ü–ª–æ—Ç–≤–∞", "–û–∫—É–Ω—å"],
    "–†–µ–∫–∞ –ü—Ç–∏—á—å": ["–©—É–∫–∞", "–ö–∞—Ä–∞—Å—å", "–û–∫—É–Ω—å", "–Ø–∑—å"],
    "–û–∑–µ—Ä–æ –î–∏–∫–æ–µ": ["–ö–∞—Ä–∞—Å—å", "–©—É–∫–∞", "–ü–ª–æ—Ç–≤–∞"],
    "–†–µ–∫–∞ –£—Å–∞": ["–©—É–∫–∞", "–û–∫—É–Ω—å"],
    "–û–∑–µ—Ä–æ –ë–µ–ª–æ–µ": ["–ö–∞—Ä–∞—Å—å", "–ö–∞—Ä–ø"],
    "–†–µ–∫–∞ –ë–µ—Ä–µ–∑–∏–Ω–∞": ["–©—É–∫–∞", "–°–æ–º", "–ñ–µ—Ä–µ—Ö", "–ì–æ–ª–∞–≤–ª—å", "–õ–µ—â"],
    "–û–∑–µ—Ä–æ –°–µ–ª—è–≤–∞": ["–õ–µ—â", "–û–∫—É–Ω—å", "–°—É–¥–∞–∫"],
    "–†–µ–∫–∞ –°–ª—É—á—å": ["–©—É–∫–∞", "–Ø–∑—å", "–ì–æ–ª–∞–≤–ª—å"],
    "–†–µ–∫–∞ –õ–æ—à–∞": ["–©—É–∫–∞", "–ü–ª–æ—Ç–≤–∞"],
    "–û–∑–µ—Ä–æ –ö—Ä–æ–º–∞–Ω—å": ["–ö–∞—Ä–∞—Å—å", "–ö–∞—Ä–ø", "–õ–µ—â"],
    "–û–∑–µ—Ä–æ –†—É–¥–µ—è": ["–°—É–¥–∞–∫", "–ü–ª–æ—Ç–≤–∞"]
}

# === –õ–æ–≥–∏–∫–∞ ===

def fetch_weather(city):
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city},BY&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            return {
                "temp": data["main"]["temp"],
                "wind": data["wind"]["speed"],
                "pressure": data["main"]["pressure"],
                "description": data["weather"][0]["description"]
            }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}")
    return None

def get_moon_phase(date=None):
    moon = ephem.Moon()
    moon.compute(ephem.Date(date) if date else ephem.now())
    phase = moon.phase
    if phase < 5:
        return "–Ω–æ–≤–æ–ª—É–Ω–∏–µ"
    elif 5 <= phase < 45:
        return "–ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif 45 <= phase < 55:
        return "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    else:
        return "–ø–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"

def calculate_success(temp, wind, pressure, moon_phase):
    score = 50
    if 10 <= temp <= 20:
        score += 20
    if wind < 5:
        score += 10
    if pressure > 755:
        score += 10
    if "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ" in moon_phase:
        score -= 5
    return min(100, max(0, score))

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    save_user_id(update.effective_user.id)
    keyboard = [[r] for r in REGIONS]
    await update.message.reply_text("üèû –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä—ã–±–∞–ª–∫–∏:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
=======
# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
CHOOSING_REGION = 0

# === –î–∞–Ω–Ω—ã–µ ===
REGIONS = {"–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "Minsk"}

# === –ö–æ–º–∞–Ω–¥—ã ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logging.info(f"–ü–æ–ª—É—á–µ–Ω /start –æ—Ç user_id={update.effective_user.id}")
    keyboard = [[region] for region in REGIONS]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üèû –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:", reply_markup=markup)
    return CHOOSING_REGION

async def choose_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    region = update.message.text
    if region not in REGIONS:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
        return CHOOSING_REGION
    context.user_data['region'] = region
    keyboard = [[d] for d in DISTRICTS_BY_REGION[region]]
    await update.message.reply_text("üèò –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return CHOOSING_DISTRICT

async def choose_district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    district = update.message.text
    context.user_data['district'] = district
    waterbodies = WATERBODIES_BY_DISTRICT.get(district, [])
    if not waterbodies:
        await update.message.reply_text("‚ùó–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–¥–æ—ë–º–∞–º.")
        return ConversationHandler.END
    keyboard = [[w] for w in waterbodies]
    await update.message.reply_text("üåä –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–æ—ë–º:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return CHOOSING_WATERBODY

async def choose_waterbody(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['waterbody'] = update.message.text
    keyboard = [["–°–µ–≥–æ–¥–Ω—è"], ["–ó–∞–≤—Ç—Ä–∞"]]
    await update.message.reply_text("üìÖ –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –ø—Ä–æ–≥–Ω–æ–∑?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return CHOOSING_DATE

async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['target_date'] = datetime.now() if update.message.text == "–°–µ–≥–æ–¥–Ω—è" else datetime.now() + timedelta(days=1)
    return await show_forecast(update, context)

async def show_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    region = context.user_data["region"]
    district = context.user_data["district"]
    waterbody = context.user_data["waterbody"]
    target_date = context.user_data["target_date"]
    city = WATERBODY_TO_CITY.get(waterbody, REGIONS[region])
    weather = fetch_weather(city)
    if not weather:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É.")
        return ConversationHandler.END
    moon = get_moon_phase(target_date)
    result = f"üìç –û–±–ª–∞—Å—Ç—å: {region}\nüìç –†–∞–π–æ–Ω: {district}\nüåä –í–æ–¥–æ—ë–º: {waterbody}\n\n"
    for fish in FISH_BY_WATERBODY.get(waterbody, []):
        chance = calculate_success(weather['temp'], weather['wind'], weather['pressure'], moon)
        result += f"üêü {fish}: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª—ë–≤–∞ {chance}%\n"
    result += (
        f"\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C"
        f"\nüí® –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å"
        f"\nüìà –î–∞–≤–ª–µ–Ω–∏–µ: {weather['pressure']} –º–º —Ä—Ç. —Å—Ç."
        f"\nüåë –§–∞–∑–∞ –õ—É–Ω—ã: {moon}"
    )
    await update.message.reply_text(result, reply_markup=ReplyKeyboardRemove())
=======
    await update.message.reply_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {region}", reply_markup=ReplyKeyboardRemove())
>>>>>>> ff8a209aaecf36ed97305f89b420679e61985ffd
    return ConversationHandler.END

# === –ó–∞–ø—É—Å–∫ ===

<<<<<<< HEAD
if __name__ == "__main__":
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    conv = ConversationHandler(
=======
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
>>>>>>> ff8a209aaecf36ed97305f89b420679e61985ffd
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_region)]
        },
        fallbacks=[CommandHandler("start", start)],
    )
<<<<<<< HEAD
    app.add_handler(conv)
    app.run_polling()
=======

    application.add_handler(conv_handler)
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...")
    application.run_polling()

if __name__ == "__main__":
    main()
>>>>>>> ff8a209aaecf36ed97305f89b420679e61985ffd
