from datetime import datetime, timedelta
import logging
import requests
import ephem
import random
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters
)

# === –¢–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã ===
TELEGRAM_TOKEN = '7297237331:AAEBR05LkndfAl-uJoiUmimctS6AZ7UxSwM'
OPENWEATHER_API_KEY = '355f0d0d5a864bdc9cb964863445f16c'

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
CHOOSING_REGION, CHOOSING_DISTRICT, CHOOSING_WATERBODY, CHOOSING_DATE = range(4)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===

REGIONS = {
    "–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "Minsk",
    "–ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "Brest",
    "–ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "Gomel",
    "–ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "Grodno",
    "–í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "Vitebsk",
    "–ú–æ–≥–∏–ª—ë–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "Mogilev"
}

DISTRICTS_BY_REGION = {
    "–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": ["–ú–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–í–∏–ª–µ–π—Å–∫–∏–π —Ä–∞–π–æ–Ω", "–ù–µ—Å–≤–∏–∂—Å–∫–∏–π —Ä–∞–π–æ–Ω"],
    "–ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": ["–ë—Ä–µ—Å—Ç—Å–∫–∏–π —Ä–∞–π–æ–Ω"],
    # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç—å
}

WATERBODIES_BY_DISTRICT = {
    "–ú–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–ó–∞—Å–ª–∞–≤—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ"],
    "–í–∏–ª–µ–π—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–í–∏–ª–µ–π—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ"],
    "–ù–µ—Å–≤–∏–∂—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–ù–µ—Å–≤–∏–∂—Å–∫–∏–µ –ø—Ä—É–¥—ã"],
    "–ë—Ä–µ—Å—Ç—Å–∫–∏–π —Ä–∞–π–æ–Ω": ["–ë—Ä–µ—Å—Ç—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ"],
}

FISH_BY_WATERBODY = {
    "–ó–∞—Å–ª–∞–≤—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": ["–©—É–∫–∞", "–û–∫—É–Ω—å"],
    "–í–∏–ª–µ–π—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": ["–°—É–¥–∞–∫", "–©—É–∫–∞", "–û–∫—É–Ω—å"],
    "–ù–µ—Å–≤–∏–∂—Å–∫–∏–µ –ø—Ä—É–¥—ã": ["–ö–∞—Ä–ø", "–ö–∞—Ä–∞—Å—å"],
    "–ë—Ä–µ—Å—Ç—Å–∫–æ–µ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ": ["–ö–∞—Ä–∞—Å—å", "–õ–µ—â"],
}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def fetch_weather(city, offset=0):
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city},BY&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()
        if response.status_code == 200:
            return {
                "temp": data["main"]["temp"],
                "wind": data["wind"]["speed"],
                "pressure": data["main"]["pressure"],
                "description": data["weather"][0]["description"]
            }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}")
    return None

def get_moon_phase(date=None):
    moon = ephem.Moon()
    moon.compute(ephem.Date(date) if date else ephem.now())
    phase = moon.phase
    if phase < 5:
        return "–Ω–æ–≤–æ–ª—É–Ω–∏–µ"
    elif 5 <= phase < 45:
        return "–ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif 45 <= phase < 55:
        return "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    else:
        return "–ø–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"

def calculate_success(temp, wind, pressure, moon_phase):
    score = 50
    if 10 <= temp <= 20:
        score += 20
    if wind < 5:
        score += 10
    if pressure > 755:
        score += 10
    if "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ" in moon_phase:
        score -= 5
    return min(100, max(0, score))

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [[region] for region in REGIONS.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üé£ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Klevprofish_bot!\n\n"
        "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä—ã–±–∞–ª–∫—É? –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏:",
        reply_markup=reply_markup
    )
    return CHOOSING_REGION

async def choose_region(update: Update, context: ContextTypes.DEFAULT_TYPE):
    region = update.message.text
    context.user_data["region"] = region

    districts = DISTRICTS_BY_REGION.get(region)
    if not districts:
        await update.message.reply_text("‚ùó–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞–π–æ–Ω–∞–º —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏.")
        return ConversationHandler.END

    keyboard = [[d] for d in districts]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=reply_markup)
    return CHOOSING_DISTRICT

async def choose_district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    district = update.message.text
    context.user_data["district"] = district

    waterbodies = WATERBODIES_BY_DISTRICT.get(district)
    if not waterbodies:
        await update.message.reply_text("‚ùó–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–¥–æ—ë–º–∞–º –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ.")
        return ConversationHandler.END

    keyboard = [[w] for w in waterbodies]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üåä –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–æ—ë–º:", reply_markup=reply_markup)
    return CHOOSING_WATERBODY

async def choose_waterbody(update: Update, context: ContextTypes.DEFAULT_TYPE):
    waterbody = update.message.text
    context.user_data["waterbody"] = waterbody

    keyboard = [["–°–µ–≥–æ–¥–Ω—è"], ["–ó–∞–≤—Ç—Ä–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìÖ –ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω—É–∂–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑?", reply_markup=reply_markup)
    return CHOOSING_DATE

async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_choice = update.message.text
    target_date = datetime.now() if date_choice == "–°–µ–≥–æ–¥–Ω—è" else datetime.now() + timedelta(days=1)
    context.user_data["target_date"] = target_date

    return await show_forecast(update, context)

async def show_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    region = context.user_data["region"]
    district = context.user_data["district"]
    waterbody = context.user_data["waterbody"]
    target_date = context.user_data["target_date"]

    city_eng = REGIONS.get(region, "Minsk")
    weather = fetch_weather(city_eng)
    if not weather:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã.")
        return ConversationHandler.END

    moon_phase = get_moon_phase(target_date)
    result = f"üìç –û–±–ª–∞—Å—Ç—å: {region}\nüìç –†–∞–π–æ–Ω: {district}\nüåä –í–æ–¥–æ—ë–º: {waterbody}\n\n"

    fishes = FISH_BY_WATERBODY.get(waterbody, [])
    for fish in fishes:
        success = calculate_success(weather['temp'], weather['wind'], weather['pressure'], moon_phase)
        result += f"üêü {fish}: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª—ë–≤–∞ {success}%\n"

    result += (
        f"\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C"
        f"\nüí® –í–µ—Ç–µ—Ä: {weather['wind']} –º/—Å"
        f"\nüìà –î–∞–≤–ª–µ–Ω–∏–µ: {weather['pressure']} –º–º —Ä—Ç. —Å—Ç."
        f"\nüåë –§–∞–∑–∞ –õ—É–Ω—ã: {moon_phase}"
    )

    await update.message.reply_text(result, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===

if __name__ == "__main__":
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_region)],
            CHOOSING_DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_district)],
            CHOOSING_WATERBODY: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_waterbody)],
            CHOOSING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_date)],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    application.add_handler(conv_handler)

    print("üöÄ Klevprofish_bot –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()