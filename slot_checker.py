import time
import threading
import requests
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = '8090061122:AAHi3IUbmNQZC_YScG5QJgQH09pFBdWTYDA'        # <-- —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TELEGRAM_CHAT_ID = '224639402'    # <-- —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π chat ID
CHECK_INTERVAL = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

BASE_URL = "https://pub2.aibolit.md/api/v2/public/booking/glazkov-minsk/doctors/lx3peyfc284141fc8/timeslots"
BOOKING_SITE_URL = "https://fibonacci.center"

bot = Bot(token=TELEGRAM_TOKEN)

def build_url():
    today = datetime.now().date()
    end_date = today + timedelta(days=60)
    return f"{BASE_URL}?dateStart={today}&dateEnd={end_date}"

def check_available_slots():
    url = build_url()
    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        data = response.json()

        available_slots = []

        for day in data:
            date = day.get('date')
            slots = day.get('slots', [])
            if slots:
                available_slots.append((date, [slot['time'] for slot in slots]))

        return available_slots

    except Exception as e:
        print(f"[{datetime.now()}] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []

def send_message_with_slots(slots):
    try:
        message = "<b>üî• –ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –∫ –Ø–∫—É–±–æ–≤—Å–∫–æ–π!</b>\n\n"
        found_multiple = False

        for date, times in slots:
            times_list = ', '.join(times)
            if len(times) >= 2:
                found_multiple = True
                message += f"<b>{date}: {times_list} üî•üî•üî•</b>\n"
            else:
                message += f"{date}: {times_list}\n"

        if found_multiple:
            message += "\n‚ö° –û—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å —Å—Ä–∞–∑—É –¥–≤–∞ —Å–ª–æ—Ç–∞ –ø–æ–¥—Ä—è–¥!\n"
        else:
            message += "\n‚ö° –°–≤–æ–±–æ–¥–Ω—ã–µ –æ–∫–Ω–∞! –£—Å–ø–µ–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!\n"

        booking_button = InlineKeyboardButton(
            text="üîµ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ",
            url=BOOKING_SITE_URL
        )
        keyboard = InlineKeyboardMarkup([[booking_button]])

        bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=message,
            parse_mode='HTML',
            reply_markup=keyboard,
            disable_web_page_preview=True
        )

        save_last_slot_time()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def save_last_slot_time():
    now = datetime.now()
    with open("last_slot.txt", "w") as f:
        f.write(str(now))

def log_slots(slots):
    with open("slots_log.txt", "a") as f:
        now = datetime.now()
        f.write(f"\n[{now}] –ù–∞–π–¥–µ–Ω—ã —Å–ª–æ—Ç—ã:\n")
        for date, times in slots:
            times_list = ', '.join(times)
            f.write(f"{date}: {times_list}\n")

def slot_monitor():
    while True:
        slots = check_available_slots()
        if slots:
            log_slots(slots)
            send_message_with_slots(slots)
            print(f"[{datetime.now()}] ‚û°Ô∏è –°–ª–æ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        else:
            print(f"[{datetime.now()}] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...")
        time.sleep(CHECK_INTERVAL)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    slots = check_available_slots()
    if slots:
        message = "<b>üî• –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–æ—Ç—ã –∫ –Ø–∫—É–±–æ–≤—Å–∫–æ–π!</b>\n\n"
        for date, times in slots:
            times_list = ', '.join(times)
            message += f"{date}: {times_list}\n"
        message += "\n‚ö° –£—Å–ø–µ–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
    else:
        message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —É –Ø–∫—É–±–æ–≤—Å–∫–æ–π –ø–æ–∫–∞ –Ω–µ—Ç. –ù–æ –î–∏–º–∏–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞ –Ω–∏–º–∏ –æ—Ö–æ—Ç–∏—Ç—Å—è! üî•"

    booking_button = InlineKeyboardButton(
        text="üîµ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç",
        url=BOOKING_SITE_URL
    )
    keyboard = InlineKeyboardMarkup([[booking_button]])

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message,
        parse_mode='HTML',
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lastslot
async def last_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("last_slot.txt", "r") as f:
            last_time = f.read().strip()
        message = f"üï∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã:\n<b>{last_time}</b>"
    except FileNotFoundError:
        message = "‚ùì –ü–æ–∫–∞ –µ—â—ë –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞."

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message,
        parse_mode='HTML'
    )

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–æ—Ç-–º–æ–Ω–∏—Ç–æ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=slot_monitor, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('lastslot', last_slot))
    application.run_polling()