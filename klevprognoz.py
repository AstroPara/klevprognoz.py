from datetime import datetime, timedelta
import logging
import requests
import ephem
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, ConversationHandler, filters

TELEGRAM_TOKEN = '7297237331:AAEBR05LkndfAl-uJoiUmimctS6AZ7UxSwM'
OPENWEATHER_API_KEY = '355f0d0d5a864bdc9cb964863445f16c'

CHOOSING_OBLAST, CHOOSING_WATERBODY, CHOOSING_DATE = range(3)

logging.basicConfig(level=logging.INFO)

OBLASTS = {
    "–ú–∏–Ω—Å–∫–∞—è": ["–û–∑–µ—Ä–æ –ù–∞—Ä–æ—á—å", "–†–µ–∫–∞ –ë–µ—Ä–µ–∑–∏–Ω–∞"],
    "–ì–æ–º–µ–ª—å—Å–∫–∞—è": ["–†–µ–∫–∞ –°–æ–∂"],
}

WATERBODY_TO_CITY = {
    "–û–∑–µ—Ä–æ –ù–∞—Ä–æ—á—å": "Naroch",
    "–†–µ–∫–∞ –ë–µ—Ä–µ–∑–∏–Ω–∞": "Berezino",
    "–†–µ–∫–∞ –°–æ–∂": "Gomel",
}

WATERBODY_TO_FISH = {
    "–û–∑–µ—Ä–æ –ù–∞—Ä–æ—á—å": ["–°—É–¥–∞–∫", "–©—É–∫–∞", "–û–∫—É–Ω—å"],
    "–†–µ–∫–∞ –ë–µ—Ä–µ–∑–∏–Ω–∞": ["–°–æ–º", "–©—É–∫–∞"],
    "–†–µ–∫–∞ –°–æ–∂": ["–°—É–¥–∞–∫", "–°–æ–º"],
}

FISH_PROFILES = {
    "–°—É–¥–∞–∫": {"temp": (10, 18), "methods": "–¥–æ–Ω–∫–∞", "baits": "—Ä–µ–∑–∏–Ω–∞, –∂–∏–≤–µ—Ü"},
    "–©—É–∫–∞": {"temp": (8, 18), "methods": "—Å–ø–∏–Ω–Ω–∏–Ω–≥", "baits": "–≤–æ–±–ª–µ—Ä—ã"},
    "–û–∫—É–Ω—å": {"temp": (12, 20), "methods": "–ø–æ–ø–ª–∞–≤–æ–∫", "baits": "–º–æ—Ç—ã–ª—å"},
    "–°–æ–º": {"temp": (18, 25), "methods": "–¥–æ–Ω–∫–∞", "baits": "–º—è—Å–æ, —á–µ—Ä–≤—å"},
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(oblast)] for oblast in OBLASTS.keys()]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return CHOOSING_OBLAST

async def choose_oblast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    oblast = update.message.text
    context.user_data["oblast"] = oblast
    keyboard = [[KeyboardButton(w)] for w in OBLASTS[oblast]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–æ—ë–º:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return CHOOSING_WATERBODY

async def choose_waterbody(update: Update, context: ContextTypes.DEFAULT_TYPE):
    waterbody = update.message.text
    context.user_data["waterbody"] = waterbody
    keyboard = [["–°–µ–≥–æ–¥–Ω—è"], ["–ó–∞–≤—Ç—Ä–∞"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return CHOOSING_DATE

async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    target_date = datetime.now() if choice == "–°–µ–≥–æ–¥–Ω—è" else datetime.now() + timedelta(days=1)
    context.user_data["date"] = target_date

    city = WATERBODY_TO_CITY[context.user_data["waterbody"]]
    weather = fetch_weather(city)
    moon_phase = get_moon_phase(target_date)

    fish_forecasts = []
    for fish in WATERBODY_TO_FISH[context.user_data["waterbody"]]:
        profile = FISH_PROFILES[fish]
        score = score_fish(profile, weather)
        fish_forecasts.append(f"üêü {fish} ‚Äî {score}% –∫–ª—ë–≤–∞ (–ø—Ä–∏–º–∞–Ω–∫–∏: {profile['baits']}, –º–µ—Ç–æ–¥: {profile['methods']})")

    result = "\n".join(fish_forecasts)
    await update.message.reply_text(
        f"üìç –í–æ–¥–æ—ë–º: {context.user_data['waterbody']}\nüìÖ –î–∞—Ç–∞: {target_date.strftime('%d.%m.%Y')}\n"
        f"üå° {weather['temp']}¬∞C | üí® {weather['wind']} –º/—Å | üìà {weather['pressure']} –º–º\nüåë –§–∞–∑–∞ –õ—É–Ω—ã: {moon_phase}\n\n{result}",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def fetch_weather(city):
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city},BY&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
    r = requests.get(url).json()
    return {
        "temp": r["main"]["temp"],
        "wind": r["wind"]["speed"],
        "pressure": r["main"]["pressure"],
    }

def get_moon_phase(date):
    moon = ephem.Moon()
    moon.compute(date)
    p = moon.phase
    if p < 5: return "–Ω–æ–≤–æ–ª—É–Ω–∏–µ"
    if p < 45: return "–ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    if p < 55: return "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    return "–ø–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"

def score_fish(profile, weather):
    t = weather["temp"]
    min_t, max_t = profile["temp"]
    if min_t <= t <= max_t:
        return 80
    elif abs(t - min_t) < 5 or abs(t - max_t) < 5:
        return 60
    return 30

if __name__ == "__main__":
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_OBLAST: [MessageHandler(filters.TEXT, choose_oblast)],
            CHOOSING_WATERBODY: [MessageHandler(filters.TEXT, choose_waterbody)],
            CHOOSING_DATE: [MessageHandler(filters.TEXT, choose_date)],
        },
        fallbacks=[]
    )
    app.add_handler(conv)
    app.run_polling()
